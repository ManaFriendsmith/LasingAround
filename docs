## The helium cost of some recipe in the laser mill is way too high or low. ##

By default, all of the helium costs of laser mill recipes are automatically calculated based on the same "canonical recipes" system used by Recycler Final Final. The idea is to have the helium cost of the recipe proportional to the cost of the item. However, some unusual recipes can result in strange values because any system built to estimate the total cost of any arbitrary recipe has no idea what any given item "means." (For example, if you've ever played with the recipe randomizer mod, it often makes uranium fuel rods cost several thousand iron, because it's evaluating the cost of one U235 as the number of uranium ore needed to output one on average, without enrichment.)

Any item or fluid with a canonical_cost defined in its prototype will use that cost. Most ores and plates have a cost of 1 and most fluids have a cost of 0.1.

Item ingredients with no canonical_cost value will have their recipes resursively evaluated. Canonical recipes are defined as, in order of priority:
1. a manually-specified recipe name in the canonical_recipe field of the item prototype
2. a recipe with the same name as the item prototype which outputs that item
3. the only recipe that outputs that item with no solid byproducts (recycling recipes are not considered)

Items with no discernible canonical recipe default to having a cost of 1.

Fluid ingredients will not evaluate recipes. Fluids with no canonical_cost default to having a cost of 0.1.

Mod makers can help point this system in the right direction by defining canonical_recipe on item prototypes, and canonical_cost on item or fluid prototypes.

Alternatively, the problem might be that something was given a canonical_cost based on its default recipe, and then some other mod changed it to be much cheaper or more expensive. Try to define canonical_costs only for relatively basic materials.

## I'm a mod maker and want to make my recipes work with the laser mill. ##

This mod has a system that auto-generates alternate versions of recipes for the laser mill if you specify a few values in the recipe prototype. Add tables called lasermill_vanilla and/or lasemill_dlc to the recipe, with any of the following fields. Which one is processed depends on whether Space Age is installed.

*helium*: How much helium the recipe should cost. Defaults to 1 if unspecified. Negative values will try to automatically calculate a value based on recursively evaluating the costs of the ingredients. -1 will use this calculated value directly, -2 will double it, etc. Finally, all helium costs of laser mill processes are divided by 2 with Space Age installed, so that laser mills can be viable everywhere even when you need to transport helium between planets.

*type*: REMOVED. No longer does anything.

*remove_fluids*: if this is true, all non-helium fluid ingredients will be removed from the new recipe (or the original recipe if convert is used.)

*remove_fluids_except*: as above, but allows you to specify a fluid other than helium to also preserve. The laser mill has only 2 fluid inputs and 2 fluid outputs. Also note that these only remove fluid ingredients, not products.

*multiply*: if set to a number, multiplies the ingredient counts, product counts, and time of the recipe by this value before adding helium to the recipe. Useful for low value per cycle recipes that a single unit of helium would be wasted on.

*convert*: If true, the recipe will be converted to a laser mill recipe in place instead of generating a copy of the recipe. All properties below se_tooltip_entity will be ignored for converting the recipe in place.

*se_variant*: If convert is true, and Space Exploration is installed, generate a copy of the recipe with a crafting category of se_variant in addition to converting the recipe in place. This option exists because laser mills cannot be placed in space so converting the recipe means that the item can't be made in space at all (It is easy to make them placeable in space but the mechanical role of laser mills is extra productivity and the rule is no productivity bonuses in space.) Crafting categories that may be of use for this are space-crafting (space assembler), space-manufacturing (space manufactory), space-laser (laser facility). Helium will not be added to SE variants - the flavor reason for helium in laser mill recipes is "inert atmosphere" and there is no more inert atmosphere than a vacuum. Does nothing if convert is not true or SE is not installed, will cause an error if it is not a valid crafting category.

*se_tooltip_entity*: For SE variants, the id of the entity to show in the tooltip. Useful values include se-space-assembling-machine, se-space-manufactory, and se-space-laser-laboratory.

*productivity*: Set this to true if the recipe can use productivity modules. The laser mill's base productivity bonus always applies regardless of this setting.

*productivity_research*: Adds a productivity bonus for the generated recipe to the specified technology. Can be a string specifying the technology name (the bonus will default to +10%) or a table formatted as {technology-name, bonus-amount}

*unlock*: a string or list of strings denoting the tech(s) that the recipe should unlock at. You can also set this to true to make the recipe always unlocked, or false to make it not unlocked by any tech. If unspecified, it will unlock with the laser mill technology.

*icon_offset*: a table with coordinates for where the small laser icon should be added to the laser mill recipe, to denote that it is different at a glance. For SE variants it will instead use the planet orbit icon from SE. If unspecified it will default to {-8, -8} which is the upper left. You can also set this to false, and the created recipe will not have this icon added to it (I do not recommend this).

An exception is if you have Icon Badges installed, and the recipe already has an icon badge in the top left (either set for the recipe or inherited from its main product.) Then an unspecified icon_offset will default to {8, -8} (top right)

The recipes will all be generated or converted in data-final-fixes. The reason for this system is it allows modpacks like BZ to modify a base recipe potentially many times and then for the laser mill version of the recipe to inherit all those changes, without every mod having to explicitly mess with both versions of the recipe.

If you want to create laser mill usable recipes manually instead of using this system, it can craft recipes of the categories "laser-milling" (unique to the laser mill, used for helium-added variants of normal recipes), "laser-assembling" (shared with assembling machines, unused by default), or "laser-milling-exclusive" (used for recipes converted to require the laser mill, shared with the K2 advanced assembler if the setting is enabled.)
